
labels_map: C:\Users\vismi\Documents\University\datasets\FSD50K\manifests\lbl_map.json
tr_manifest_path: C:\Users\vismi\Documents\University\datasets\FSD50K\manifests\tr.csv
val_manifest_path: C:\Users\vismi\Documents\University\datasets\FSD50K\manifests\val.csv
eval_manifest_path: /home/student.aau.dk/zg27bp/datasets/covid19_cough/manifests/test_chunk.csv

exp:
    exp_name: sweeps_test
    wandb: True
    wandb_api_key:
    proj_name: sweep_tests
    entity: ce8-840
    save_dir: outputs/
    log_freq: 10
    val_freq: 1
    log_to_file: False
    log_to_stdout: False

audio_config:
    feature: melspectrogram
    n_mels: 80
    num_frames: 100
    sample_rate: 16000
    min_duration: 1
hparams:
    KWT:
        input_res: [80, 100] #shape of FSD50K spectograms
        patch_res: [16, 4] 
        num_classes: 35 # number of classes 
        mlp_dim: 1536 # MLP dimensions. embedding_dim to mlp_dim ratio: 1:4
        dim: 384  # number of embeddings 
        heads: 6 # number of attention heads
        depth: 12 #depth of network
    early_stopping_patience: 10

sweep:
    method: bayes #'grid','bayes','random'
    metric:
        name: val_loss_epoch #This can be anything. Loss, Accuracy, mAP. Just make sure the goal is set properly. We need to minimize loss but maximize accuracy.
        goal: minimize
    parameters:
        n_epochs: #You can add parameters that remain static throughout all the runs to log them
            value: 40
        dropout:
            distribution: uniform
            min: 0.
            max: 0.5
        batch_size:
            distribution: q_log_uniform_values
            q: 8
            min: 32
            max: 256
        scheduler:
            values: [True, False]
        n_warmup:
            distribution: uniform
            min: 1
            max: 10
        optimizer:
            values: ['adam', 'sgd']
        weight_decay:
            distribution: uniform
            min: 0.01
            max: 0.1
        betas: 
            value: !!python/tuple [0.9, 0.98]
        learning_rate:
            distribution: uniform
            min: 0
            max: 0.1

    